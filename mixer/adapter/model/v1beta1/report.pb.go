// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/adapter/model/v1beta1/report.proto

package v1beta1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/googleapis/google/rpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Expresses the result of a report call.
type ReportResult struct {
}

func (m *ReportResult) Reset()                    { *m = ReportResult{} }
func (*ReportResult) ProtoMessage()               {}
func (*ReportResult) Descriptor() ([]byte, []int) { return fileDescriptorReport, []int{0} }

func init() {
	proto.RegisterType((*ReportResult)(nil), "istio.mixer.adapter.model.v1beta1.ReportResult")
}
func (m *ReportResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintReport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReportResult) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovReport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReport(x uint64) (n int) {
	return sovReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ReportResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportResult{`,
		`}`,
	}, "")
	return s
}
func valueToStringReport(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ReportResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mixer/adapter/model/v1beta1/report.proto", fileDescriptorReport) }

var fileDescriptorReport = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0x31, 0x4a, 0x05, 0x31,
	0x10, 0x86, 0x93, 0xc6, 0xe2, 0x21, 0x16, 0x22, 0x08, 0xaf, 0x18, 0xd0, 0xea, 0x55, 0x19, 0x1e,
	0xde, 0xc0, 0x23, 0xbc, 0x72, 0xbb, 0xac, 0x1b, 0x43, 0x60, 0xd7, 0x09, 0xc9, 0x44, 0x2c, 0x3d,
	0x82, 0xc7, 0xf0, 0x28, 0x5b, 0x6e, 0x69, 0x69, 0x62, 0x63, 0xb9, 0x47, 0x10, 0xb3, 0xa9, 0x5f,
	0x37, 0xc3, 0xf7, 0x0d, 0xf3, 0xff, 0xbb, 0xc3, 0xe4, 0xde, 0x4c, 0x40, 0x3d, 0x68, 0xcf, 0x26,
	0xe0, 0x44, 0x83, 0x19, 0xf1, 0xf5, 0xd8, 0x1b, 0xd6, 0x47, 0x0c, 0xc6, 0x53, 0x60, 0xe5, 0x03,
	0x31, 0x5d, 0xdf, 0xb9, 0xc8, 0x8e, 0x54, 0xf5, 0x55, 0xf3, 0x55, 0xf5, 0x55, 0xf3, 0xf7, 0x37,
	0x96, 0x2c, 0x55, 0x1b, 0xff, 0xa7, 0xed, 0x70, 0x0f, 0x96, 0xc8, 0x8e, 0x06, 0xeb, 0xd6, 0xa7,
	0x67, 0x1c, 0x52, 0xd0, 0xec, 0xe8, 0xa5, 0xf1, 0xdb, 0xc6, 0x83, 0x7f, 0xc2, 0xc8, 0x9a, 0x53,
	0xdc, 0xc0, 0xfd, 0xd5, 0xee, 0xf2, 0x54, 0x13, 0x9c, 0x4c, 0x4c, 0x23, 0x3f, 0x76, 0x73, 0x06,
	0xb1, 0x64, 0x10, 0x5f, 0x19, 0xc4, 0x9a, 0x41, 0xbc, 0x17, 0x90, 0x9f, 0x05, 0xc4, 0x5c, 0x40,
	0x2e, 0x05, 0xe4, 0x77, 0x01, 0xf9, 0x5b, 0x40, 0xac, 0x05, 0xe4, 0xc7, 0x0f, 0x88, 0xee, 0xb0,
	0x65, 0x76, 0x84, 0xda, 0x3b, 0x3c, 0x53, 0xb5, 0xbf, 0xa8, 0x2f, 0x1f, 0xfe, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xe2, 0xdf, 0xc9, 0x10, 0x01, 0x00, 0x00,
}

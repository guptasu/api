// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/adapter/model/v1beta/value_type.proto

package istio_mixer_adapter_model_v1beta

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ValueType describes the types that values in the Istio system can take. These
// are used to describe the type of Attributes at run time, describe the type of
// the result of evaluating an expression, and to describe the runtime type of
// fields of other descriptors.
type ValueType int32

const (
	// Invalid, default value.
	VALUE_TYPE_UNSPECIFIED ValueType = 0
	// An undiscriminated variable-length string.
	STRING ValueType = 1
	// An undiscriminated 64-bit signed integer.
	INT64 ValueType = 2
	// An undiscriminated 64-bit floating-point value.
	DOUBLE ValueType = 3
	// An undiscriminated boolean value.
	BOOL ValueType = 4
	// A point in time.
	TIMESTAMP ValueType = 5
	// An IP address.
	IP_ADDRESS ValueType = 6
	// An email address.
	EMAIL_ADDRESS ValueType = 7
	// A URI.
	URI ValueType = 8
	// A DNS name.
	DNS_NAME ValueType = 9
	// A span between two points in time.
	DURATION ValueType = 10
	// A map string -> string, typically used by headers.
	STRING_MAP ValueType = 11
)

var ValueType_name = map[int32]string{
	0:  "VALUE_TYPE_UNSPECIFIED",
	1:  "STRING",
	2:  "INT64",
	3:  "DOUBLE",
	4:  "BOOL",
	5:  "TIMESTAMP",
	6:  "IP_ADDRESS",
	7:  "EMAIL_ADDRESS",
	8:  "URI",
	9:  "DNS_NAME",
	10: "DURATION",
	11: "STRING_MAP",
}
var ValueType_value = map[string]int32{
	"VALUE_TYPE_UNSPECIFIED": 0,
	"STRING":                 1,
	"INT64":                  2,
	"DOUBLE":                 3,
	"BOOL":                   4,
	"TIMESTAMP":              5,
	"IP_ADDRESS":             6,
	"EMAIL_ADDRESS":          7,
	"URI":                    8,
	"DNS_NAME":               9,
	"DURATION":               10,
	"STRING_MAP":             11,
}

func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptorValueType, []int{0} }

func init() {
	proto.RegisterEnum("istio.mixer.adapter.model.v1beta.ValueType", ValueType_name, ValueType_value)
}
func (x ValueType) String() string {
	s, ok := ValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

func init() {
	proto.RegisterFile("mixer/adapter/model/v1beta/value_type.proto", fileDescriptorValueType)
}

var fileDescriptorValueType = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0xd0, 0x4d, 0x4a, 0xc3, 0x40,
	0x14, 0xc0, 0xf1, 0x8c, 0xfd, 0xcc, 0xd3, 0xca, 0x38, 0x0b, 0x17, 0x2e, 0x06, 0xd7, 0x2a, 0x09,
	0xa2, 0xb8, 0x9f, 0x9a, 0x51, 0x06, 0xf2, 0x45, 0x32, 0x29, 0xb8, 0x1a, 0x52, 0x3a, 0x8b, 0x42,
	0x4b, 0x42, 0x8d, 0xc5, 0xee, 0x3c, 0x82, 0xc7, 0xf0, 0x0e, 0x5e, 0xc0, 0x65, 0x97, 0x2e, 0xed,
	0xb8, 0x71, 0xd9, 0x23, 0x48, 0x52, 0x71, 0xf9, 0xfe, 0xf0, 0x7b, 0x3c, 0x1e, 0x9c, 0xcf, 0xa7,
	0xcf, 0x7a, 0xe1, 0xe6, 0x93, 0xbc, 0xac, 0xf4, 0xc2, 0x9d, 0x17, 0x13, 0x3d, 0x73, 0x97, 0x97,
	0x63, 0x5d, 0xe5, 0xee, 0x32, 0x9f, 0x3d, 0x69, 0x55, 0xad, 0x4a, 0xed, 0x94, 0x8b, 0xa2, 0x2a,
	0xc8, 0xe9, 0xf4, 0xb1, 0x9a, 0x16, 0x4e, 0x43, 0x9c, 0x3f, 0xe2, 0x34, 0xc4, 0xd9, 0x91, 0xb3,
	0x77, 0x04, 0xf6, 0xa8, 0x66, 0x72, 0x55, 0x6a, 0x72, 0x02, 0xc7, 0x23, 0xe6, 0x67, 0x5c, 0xc9,
	0x87, 0x98, 0xab, 0x2c, 0x4c, 0x63, 0x7e, 0x2b, 0xee, 0x04, 0xf7, 0xb0, 0x45, 0x00, 0xba, 0xa9,
	0x4c, 0x44, 0x78, 0x8f, 0x11, 0xb1, 0xa1, 0x23, 0x42, 0x79, 0x73, 0x8d, 0xf7, 0xea, 0xec, 0x45,
	0xd9, 0xd0, 0xe7, 0xb8, 0x45, 0xfa, 0xd0, 0x1e, 0x46, 0x91, 0x8f, 0xdb, 0x64, 0x00, 0xb6, 0x14,
	0x01, 0x4f, 0x25, 0x0b, 0x62, 0xdc, 0x21, 0x87, 0x00, 0x22, 0x56, 0xcc, 0xf3, 0x12, 0x9e, 0xa6,
	0xb8, 0x4b, 0x8e, 0x60, 0xc0, 0x03, 0x26, 0xfc, 0xff, 0xd4, 0x23, 0x3d, 0x68, 0x65, 0x89, 0xc0,
	0x7d, 0x72, 0x00, 0x7d, 0x2f, 0x4c, 0x55, 0xc8, 0x02, 0x8e, 0xed, 0x66, 0xca, 0x12, 0x26, 0x45,
	0x14, 0x62, 0xa8, 0xf7, 0xec, 0x6e, 0x50, 0x01, 0x8b, 0xf1, 0xfe, 0xf0, 0x62, 0xbd, 0xa1, 0xd6,
	0xe7, 0x86, 0x5a, 0xdb, 0x0d, 0x45, 0x2f, 0x86, 0xa2, 0x37, 0x43, 0xd1, 0x87, 0xa1, 0x68, 0x6d,
	0x28, 0xfa, 0x32, 0x14, 0xfd, 0x18, 0x6a, 0x6d, 0x0d, 0x45, 0xaf, 0xdf, 0xd4, 0x1a, 0x77, 0x9b,
	0xa7, 0x5c, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x73, 0xae, 0xb8, 0xc4, 0x43, 0x01, 0x00, 0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: policy/v1beta1/cfg.proto

/*
Package v1beta1 is a generated protocol buffer package.

Describes the rules used to configure Mixer's policy and telemetry features.

It is generated from these files:
	policy/v1beta1/cfg.proto

It has these top-level messages:
	AttributeManifest
	Rule
	Action
*/
package v1beta1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AttributeManifest describes a set of Attributes produced by some component
// of an Istio deployment.
type AttributeManifest struct {
	// Optional. The revision of this document. Assigned by server.
	Revision string `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// Required. Name of the component producing these attributes. This can be
	// the proxy (with the canonical name "istio-proxy") or the name of an
	// `attributes` kind adapter in Mixer.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The set of attributes this Istio component will be responsible for producing at runtime.
	// We map from attribute name to the attribute's specification. The name of an attribute,
	// which is how attributes are referred to in aspect configuration, must conform to:
	//
	//     Name = IDENT { SEPARATOR IDENT };
	//
	// Where `IDENT` must match the regular expression `[a-z][a-z0-9]+` and `SEPARATOR` must
	// match the regular expression `[\.-]`.
	//
	// Attribute names must be unique within a single Istio deployment. The set of canonical
	// attributes are described at https://istio.io/docs/reference/attribute-vocabulary.html.
	// Attributes not in that list should be named with a component-specific suffix such as
	// request.count-my.component.
	Attributes map[string]*AttributeManifest_AttributeInfo `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AttributeManifest) Reset()                    { *m = AttributeManifest{} }
func (m *AttributeManifest) String() string            { return proto.CompactTextString(m) }
func (*AttributeManifest) ProtoMessage()               {}
func (*AttributeManifest) Descriptor() ([]byte, []int) { return fileDescriptorCfg, []int{0} }

func (m *AttributeManifest) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *AttributeManifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AttributeManifest) GetAttributes() map[string]*AttributeManifest_AttributeInfo {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// AttributeInfo describes the schema of an Istio `Attribute`.
//
// ## Istio Attributes
//
// Istio uses `attributes` to describe runtime activities of Istio services.
// An Istio attribute carries a specific piece of information about an activity,
// such as the error code of an API request, the latency of an API request, or the
// original IP address of a TCP connection. The attributes are often generated
// and consumed by different services. For example, a frontend service can
// generate an authenticated user attribute and pass it to a backend service for
// access control purpose.
//
// To simplify the system and improve developer experience, Istio uses
// shared attribute definitions across all components. For example, the same
// authenticated user attribute will be used for logging, monitoring, analytics,
// billing, access control, auditing. Many Istio components provide their
// functionality by collecting, generating, and operating on attributes.
// For example, the proxy collects the error code attribute, and the logging
// stores it into a log.
//
// ## Design
//
// Each Istio attribute must conform to an `AttributeInfo` in an
// `AttributeManifest` in the current Istio deployment at runtime. An
// [`AttributeInfo`][istio.policy.v1beta1] is used to define an attribute's
// metadata: the type of its value and a detailed description that explains
// the semantics of the attribute type. Each attribute's name is globally unique;
// in other words an attribute name can only appear once across all manifests.
//
// The runtime presentation of an attribute is intentionally left out of this
// specification, because passing attribute using JSON, XML, or Protocol Buffers
// does not change the semantics of the attribute. Different implementations
// can choose different representations based on their needs.
//
// ## HTTP Mapping
//
// Because many systems already have REST APIs, it makes sense to define a
// standard HTTP mapping for Istio attributes that are compatible with typical
// REST APIs. The design is to map one attribute to one HTTP header, the
// attribute name and value becomes the HTTP header name and value. The actual
// encoding scheme will be decided later.
type AttributeManifest_AttributeInfo struct {
	// Optional. A human-readable description of the attribute's purpose.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The type of data carried by this attribute.
	ValueType ValueType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=istio.policy.v1beta1.ValueType" json:"value_type,omitempty"`
}

func (m *AttributeManifest_AttributeInfo) Reset()         { *m = AttributeManifest_AttributeInfo{} }
func (m *AttributeManifest_AttributeInfo) String() string { return proto.CompactTextString(m) }
func (*AttributeManifest_AttributeInfo) ProtoMessage()    {}
func (*AttributeManifest_AttributeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCfg, []int{0, 0}
}

func (m *AttributeManifest_AttributeInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AttributeManifest_AttributeInfo) GetValueType() ValueType {
	if m != nil {
		return m.ValueType
	}
	return VALUE_TYPE_UNSPECIFIED
}

// A Rule is a selector and a set of intentions to be executed when the
// selector is `true`
//
// The following example instructs Mixer to invoke 'prometheus-handler' handler for all services and pass it the
// instance constructed using the 'RequestCountByService' instance.
//
// ```yaml
// - match: destination.service == "*"
//   actions:
//   - handler: prometheus-handler
//     instances:
//     - RequestCountByService
// ```
type Rule struct {
	// Required. Match is an attribute based predicate. When Mixer receives a
	// request it evaluates the match expression and executes all the associated `actions`
	// if the match evaluates to true.
	//
	// A few example match:
	//
	// * an empty match evaluates to `true`
	// * `true`, a boolean literal; a rule with this match will always be executed
	// * `destination.service == ratings*` selects any request targeting a service whose
	// name starts with "ratings"
	// * `attr1 == "20" && attr2 == "30"` logical AND, OR, and NOT are also available
	Match string `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Optional. The actions that will be executed when match evaluates to `true`.
	Actions []*Action `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptorCfg, []int{1} }

func (m *Rule) GetMatch() string {
	if m != nil {
		return m.Match
	}
	return ""
}

func (m *Rule) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

// Action describes which [Handler][istio.policy.v1beta1.Handler] to invoke and what data to pass to it for processing.
//
// The following example instructs Mixer to invoke 'prometheus-handler' handler and pass it the object
// constructed using the instance 'RequestCountByService'.
//
// ```yaml
//   handler: prometheus-handler
//   instances:
//   - RequestCountByService
// ```
type Action struct {
	// Required. Fully qualified name of the handler to invoke.
	// Must match the `name` of a [Handler][istio.policy.v1beta1.Handler.name].
	Handler string `protobuf:"bytes,2,opt,name=handler,proto3" json:"handler,omitempty"`
	// Required. Each value must match the fully qualified name of the
	// [Instance][istio.policy.v1beta1.Instance.name]s.
	// Referenced instances are evaluated by resolving the attributes/literals for all the fields.
	// The constructed objects are then passed to the `handler` referenced within this action.
	Instances []string `protobuf:"bytes,3,rep,name=instances" json:"instances,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptorCfg, []int{2} }

func (m *Action) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *Action) GetInstances() []string {
	if m != nil {
		return m.Instances
	}
	return nil
}

func init() {
	proto.RegisterType((*AttributeManifest)(nil), "istio.policy.v1beta1.AttributeManifest")
	proto.RegisterType((*AttributeManifest_AttributeInfo)(nil), "istio.policy.v1beta1.AttributeManifest.AttributeInfo")
	proto.RegisterType((*Rule)(nil), "istio.policy.v1beta1.Rule")
	proto.RegisterType((*Action)(nil), "istio.policy.v1beta1.Action")
}

func init() { proto.RegisterFile("policy/v1beta1/cfg.proto", fileDescriptorCfg) }

var fileDescriptorCfg = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x6b, 0xe3, 0x30,
	0x10, 0x25, 0x71, 0x3e, 0xd6, 0x13, 0xf6, 0x4b, 0xe4, 0x60, 0xbc, 0x59, 0x12, 0x72, 0xca, 0xc9,
	0x26, 0x59, 0x76, 0xb7, 0xf4, 0x50, 0xda, 0x42, 0x0f, 0xa5, 0xf4, 0x62, 0x42, 0x0b, 0xbd, 0x14,
	0xd9, 0x91, 0x13, 0x51, 0x47, 0x72, 0xad, 0xb1, 0xc1, 0x3f, 0xa0, 0xff, 0xbb, 0x58, 0xb6, 0xe3,
	0x34, 0x4d, 0x0f, 0xbd, 0xcd, 0xbc, 0x79, 0x7a, 0xef, 0x8d, 0x24, 0xb0, 0x62, 0x19, 0xf1, 0x20,
	0x77, 0xb3, 0xb9, 0xcf, 0x90, 0xce, 0xdd, 0x20, 0x5c, 0x3b, 0x71, 0x22, 0x51, 0x92, 0x21, 0x57,
	0xc8, 0xa5, 0x53, 0xce, 0x9d, 0x6a, 0x6e, 0x8f, 0xd6, 0x52, 0xae, 0x23, 0xe6, 0x6a, 0x8e, 0x9f,
	0x86, 0xae, 0xc2, 0x24, 0x0d, 0xb0, 0x3c, 0x63, 0x8f, 0x0f, 0xd4, 0x32, 0x1a, 0xa5, 0xec, 0x11,
	0xf3, 0x98, 0x95, 0x84, 0xe9, 0x8b, 0x01, 0x3f, 0x2f, 0x10, 0x13, 0xee, 0xa7, 0xc8, 0x6e, 0xa9,
	0xe0, 0x21, 0x53, 0x48, 0x6c, 0xf8, 0x92, 0xb0, 0x8c, 0x2b, 0x2e, 0x85, 0xd5, 0x9a, 0xb4, 0x66,
	0xa6, 0xb7, 0xeb, 0x09, 0x81, 0x8e, 0xa0, 0x5b, 0x66, 0xb5, 0x35, 0xae, 0x6b, 0x72, 0x0f, 0x40,
	0x6b, 0x11, 0x65, 0x19, 0x13, 0x63, 0x36, 0x58, 0xfc, 0x77, 0x8e, 0xe5, 0x75, 0xde, 0x99, 0x35,
	0x88, 0xba, 0x12, 0x98, 0xe4, 0xde, 0x9e, 0x94, 0xfd, 0x0c, 0x5f, 0x77, 0xe3, 0x6b, 0x11, 0x4a,
	0x32, 0x81, 0xc1, 0x8a, 0xa9, 0x20, 0xe1, 0x31, 0x36, 0xe1, 0xf6, 0x21, 0x72, 0x06, 0xd0, 0x6c,
	0xa9, 0x53, 0x7e, 0x5b, 0x8c, 0x8f, 0x67, 0xb9, 0x2b, 0x78, 0xcb, 0x3c, 0x66, 0x9e, 0x99, 0xd5,
	0xa5, 0x8d, 0xf0, 0xfd, 0x20, 0x11, 0xf9, 0x01, 0xc6, 0x13, 0xcb, 0x2b, 0xb3, 0xa2, 0x24, 0x37,
	0xd0, 0xd5, 0x27, 0xb4, 0xfe, 0x60, 0xf1, 0xf7, 0xd3, 0xbb, 0x16, 0xcb, 0x78, 0xa5, 0xc6, 0x69,
	0xfb, 0xa4, 0x35, 0x5d, 0x42, 0xc7, 0x4b, 0x23, 0x46, 0x86, 0xd0, 0xdd, 0x52, 0x0c, 0x36, 0x95,
	0x59, 0xd9, 0x90, 0x7f, 0xd0, 0xa7, 0x41, 0xb1, 0x9d, 0xb2, 0xda, 0xfa, 0x72, 0x47, 0x1f, 0x18,
	0x6a, 0x92, 0x57, 0x93, 0xa7, 0xe7, 0xd0, 0x2b, 0x21, 0x62, 0x41, 0x7f, 0x43, 0xc5, 0x2a, 0x62,
	0x49, 0xf5, 0x70, 0x75, 0x4b, 0x46, 0x60, 0x72, 0xa1, 0x90, 0x8a, 0xa0, 0x7a, 0x3a, 0xd3, 0x6b,
	0x80, 0xcb, 0xdf, 0x0f, 0xbf, 0x4a, 0x27, 0x2e, 0x5d, 0x1a, 0x73, 0xf7, 0xed, 0x7f, 0xf2, 0x7b,
	0xfa, 0x17, 0xfd, 0x79, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x03, 0x73, 0x97, 0x33, 0xb6, 0x02, 0x00,
	0x00,
}
